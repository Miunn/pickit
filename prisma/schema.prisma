// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FolderTokenPermission {
  READ
  WRITE
}

enum Role {
  USER
  ADMIN
}

enum PasswordResetRequestStatus {
  PENDING
  SUCCESS
  ERROR
}

model Folder {
  id                String              @id @default(cuid())
  name              String
  images            Image[]             @relation("FolderImages")
  videos            Video[]             @relation("FolderVideos")
  size              Int                 @default(0)
  cover             Image?              @relation(fields: [coverId], references: [id])
  coverId           String?             @unique
  createdBy         User                @relation("UserFolders", fields: [createdById], references: [id], onDelete: Cascade)
  createdById       String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  AccessToken       AccessToken[]
  PersonAccessToken PersonAccessToken[]
}

model Image {
  id          String   @id @default(cuid())
  name        String
  description String?
  size        Int
  extension   String
  width       Int
  height      Int
  type        String   @default("image")
  folder      Folder   @relation("FolderImages", fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String
  folderCover Folder?
  createdBy   User     @relation("UserImages", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments Comment[]
}

model Video {
  id          String   @id @default(cuid())
  name        String
  description String?
  size        Int
  extension   String
  width       Int      @default(0)
  height      Int      @default(0)
  duration    Int      @default(0)
  thumbnail   String?
  type        String   @default("video")
  folder      Folder   @relation("FolderVideos", fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String
  createdBy   User     @relation("UserVideos", fields: [createdById], references: [id], onDelete: Cascade)
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  comments Comment[]
}

model Comment {
  id          String   @id @default(cuid())
  text        String
  image       Image?   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  video       Video?   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  imageId     String?
  videoId     String?
  createdBy   User?    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String?
  name        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessToken {
  id         String                @id @default(cuid())
  token      String                @unique @default(cuid())
  folder     Folder                @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   String
  uses       Int                   @default(0)
  isActive   Boolean               @default(true)
  permission FolderTokenPermission @default(READ)
  locked     Boolean               @default(false)
  pinCode    String?
  expires    DateTime
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model PersonAccessToken {
  id         String                @id @default(cuid())
  token      String                @unique @default(cuid())
  email      String
  folder     Folder                @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   String
  uses       Int                   @default(0)
  isActive   Boolean               @default(true)
  permission FolderTokenPermission @default(READ)
  locked     Boolean               @default(false)
  pinCode    String?
  expires    DateTime
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model User {
  id                        String    @id @default(cuid())
  name                      String
  email                     String    @unique
  emailVerified             Boolean   @default(false)
  emailVerificationDeadline DateTime?
  image                     String?
  usedStorage               BigInt    @default(0)
  maxStorage                BigInt    @default(5368709120)
  role                      Role[]    @default([USER])
  password                  String?
  sessions                  Session[]

  googleId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verifiedEmailRequest VerifyEmailRequest?
  passwordResetRequest PasswordResetRequest?

  folders  Folder[]  @relation("UserFolders")
  images   Image[]   @relation("UserImages")
  videos   Video[]   @relation("UserVideos")
  comments Comment[]
}

model VerifyEmailRequest {
  id      String   @id @default(cuid())
  token   String   @unique @default(uuid(4))
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model PasswordResetRequest {
  id      String   @id @default(cuid())
  token   String   @unique @default(uuid(4))
  expires DateTime
  status  PasswordResetRequestStatus @default(PENDING)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Session {
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
