// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Folder {
  id          String        @id @default(cuid())
  name        String
  images      Image[]       @relation("FolderImages")
  cover       Image?        @relation(fields: [coverId], references: [id])
  coverId     String?       @unique
  createdBy   User          @relation("UserFolders", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  AccessToken AccessToken[]
}

model Image {
  id          String   @id @default(cuid())
  name        String
  path        String
  folder      Folder   @relation("FolderImages", fields: [folderId], references: [id], onDelete: Cascade)
  folderId    String
  folderCover Folder?
  createdBy   User     @relation("UserImages", fields: [createdById], references: [id])
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AccessToken {
  id        String   @id @default(cuid())
  token     String   @unique
  folder    Folder   @relation(fields: [folderId], references: [id])
  folderId  String
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  folders Folder[] @relation("UserFolders")
  images  Image[]  @relation("UserImages")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
