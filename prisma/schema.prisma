// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  EFFICIENT
  PRO
}

enum FolderTokenPermission {
  READ
  WRITE
  ADMIN
}

enum Role {
  USER
  ADMIN
}

enum PasswordResetRequestStatus {
  PENDING
  USED
  EXPIRED
  SUCCESS
  ERROR
}

enum FileType {
  IMAGE
  VIDEO
}

enum NotificationType {
  FILE_UPLOADED
  FOLDER_SHARED
}

model Folder {
  id           String        @id @default(cuid())
  name         String
  description  String?
  key          String        @default("")
  iv           String        @default("")
  files        File[]        @relation("FolderFiles")
  size         Int           @default(0)
  cover        File?         @relation(fields: [coverId], references: [id])
  coverId      String?       @unique
  createdBy    User          @relation("UserFolders", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  accessTokens AccessToken[]
  tags         FolderTag[]
}

model FolderTag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#00a8ff")
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  String
  files     File[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

model File {
  id            String    @id @default(cuid())
  name          String
  description   String?
  size          Int
  extension     String
  width         Int       @default(0)
  height        Int       @default(0)
  make          String?
  model         String?
  software      String?
  orientation   String?
  exposureTime  Float?
  fNumber       Float?
  iso           Float?
  takenAt       DateTime?
  modifiedAt    DateTime?
  flash         String?
  focalLength   Float?
  contrast      String?
  saturation    String?
  sharpness     String?
  whiteBalance  String?
  altitude      Float?
  latitude      Float?
  longitude     Float?
  duration      Int       @default(0)
  thumbnail     String?
  type          FileType  @default(IMAGE)
  position      Int       @default(0)
  folder        Folder    @relation("FolderFiles", fields: [folderId], references: [id], onDelete: Cascade)
  folderId      String
  folderCover   Folder?
  folderCoverId String?
  createdBy     User      @relation("UserFiles", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  comments Comment[]
  likes    FileLike[]
  tags     FolderTag[]
}

model Comment {
  id             String   @id @default(cuid())
  text           String
  file           File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String
  createdBy      User?    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById    String?
  createdByEmail String?
  name           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  likes CommentLike[]
}

model FileLike {
  id             String   @id @default(cuid())
  file           File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId         String
  createdBy      User?    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById    String?
  createdByEmail String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model CommentLike {
  id             String   @id @default(cuid())
  comment        Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId      String
  createdBy      User?    @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById    String?
  createdByEmail String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model AccessToken {
  id         String                @id @default(cuid())
  token      String                @unique @default(cuid())
  email      String?
  folder     Folder                @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId   String
  uses       Int                   @default(0)
  isActive   Boolean               @default(true)
  permission FolderTokenPermission @default(READ)
  allowMap   Boolean               @default(false)
  locked     Boolean               @default(false)
  pinCode    String?
  expires    DateTime
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model Notification {
  id         String           @id @default(cuid())
  type       NotificationType
  userId     String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  isRead     Boolean          @default(false)
  authorName String
  folderName String
  href       String
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

model User {
  id                        String    @id @default(cuid())
  stripeCustomerId          String?   @unique
  name                      String
  email                     String    @unique
  emailVerified             Boolean   @default(false)
  emailVerificationDeadline DateTime?
  image                     String?
  usedStorage               BigInt    @default(0)
  maxStorage                BigInt    @default(5000000000)
  maxAlbums                 Int       @default(10)
  maxSharingLinks           Int       @default(50)
  role                      Role[]    @default([USER])
  password                  String?
  sessions                  Session[]
  plan                      Plan      @default(FREE)

  publicKey  String?
  privateKey String? // Encrypted, for device switching
  e2eeSalt   String?
  e2eeSaltIv String?

  googleId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  verifiedEmailRequest VerifyEmailRequest?
  passwordResetRequest PasswordResetRequest?

  folders       Folder[]       @relation("UserFolders")
  files         File[]         @relation("UserFiles")
  comments      Comment[]
  likes         FileLike[]
  commentLikes  CommentLike[]
  tags          FolderTag[]
  notifications Notification[]
}

model VerifyEmailRequest {
  id      String   @id @default(cuid())
  token   String   @unique @default(uuid(4))
  expires DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model PasswordResetRequest {
  id      String                     @id @default(cuid())
  token   String                     @unique @default(uuid(4))
  expires DateTime
  status  PasswordResetRequestStatus @default(PENDING)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}

model Session {
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}
